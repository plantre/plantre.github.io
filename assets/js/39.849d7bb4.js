(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{396:function(v,_,l){"use strict";l.r(_);var p=l(7),t=Object(p.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("p",[v._v("以下是主流Java垃圾回收器的对比分析，结合不同特性、适用场景及版本演进进行总结：")]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("一、"),_("strong",[v._v("基础型回收器")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("Serial/Serial Old")]),v._v(" "),_("p",[v._v("• 算法：新生代（复制算法），老年代（标记-整理算法）。")]),v._v(" "),_("p",[v._v("• 特点：单线程执行，全程STW（Stop-The-World），简单高效但停顿时间长。")]),v._v(" "),_("p",[v._v("• 适用场景：客户端程序、小型微服务（内存<200MB）或硬件资源受限环境。")]),v._v(" "),_("p",[v._v("• 缺点：多核CPU下吞吐量低，大堆场景停顿不可接受。")])]),v._v(" "),_("li",[_("p",[v._v("ParNew")]),v._v(" "),_("p",[v._v("• 算法：新生代多线程并行复制算法。")]),v._v(" "),_("p",[v._v("• 特点：Serial的多线程版本，需与CMS配合，默认线程数与CPU核数相同。")]),v._v(" "),_("p",[v._v("• 适用场景：JDK8及之前与CMS搭配，注重低延迟的Web服务。")]),v._v(" "),_("p",[v._v("• 缺点：JDK9后逐渐被G1取代，仅用于兼容旧系统。")])])]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("二、"),_("strong",[v._v("吞吐量优先型")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("Parallel Scavenge/Old")]),v._v(" "),_("p",[v._v("• 算法：新生代（复制算法），老年代（标记-整理算法）。")]),v._v(" "),_("p",[v._v("• 特点：多线程并行回收，关注吞吐量而非单次停顿时间，支持自适应调整堆参数。")]),v._v(" "),_("p",[v._v("• 适用场景：后台批处理、大数据计算（如Hadoop）。")]),v._v(" "),_("p",[v._v("• 缺点：无法保证单次停顿时间，交互式应用体验差。")])])]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("三、"),_("strong",[v._v("低延迟型")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("CMS（Concurrent Mark Sweep）")]),v._v(" "),_("p",[v._v("• 算法：老年代标记-清除算法，并发执行以减少停顿。")]),v._v(" "),_("p",[v._v("• 特点：")]),v._v(" "),_("p",[v._v("◦ 并发标记阶段允许用户线程运行，仅部分阶段STW。")]),v._v(" "),_("p",[v._v("◦ 存在内存碎片问题，需Full GC时整理（默认触发条件为内存不足）。")]),v._v(" "),_("p",[v._v("• 适用场景：高并发Web服务（如电商订单系统），JDK8及之前的主流选择。")]),v._v(" "),_("p",[v._v("• 缺点：内存碎片导致频繁Full GC，JDK14后废弃。")])]),v._v(" "),_("li",[_("p",[v._v("G1（Garbage-First）")]),v._v(" "),_("p",[v._v("• 算法：分Region回收（复制+标记-整理），支持混合回收（Mixed GC）。")]),v._v(" "),_("p",[v._v("• 特点：")]),v._v(" "),_("p",[v._v("◦ 可预测停顿时间（通过"),_("code",[v._v("-XX:MaxGCPauseMillis")]),v._v("设置）。")]),v._v(" "),_("p",[v._v("◦ 适用于大堆（>4GB），无内存碎片问题。")]),v._v(" "),_("p",[v._v("• 适用场景：JDK9+默认回收器，兼顾吞吐量和低延迟。")]),v._v(" "),_("p",[v._v("• 缺点：小堆场景性能不如CMS，内存占用较高。")])])]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("四、"),_("strong",[v._v("新一代超低延迟型")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("Shenandoah")]),v._v(" "),_("p",[v._v("• 特点：Red Hat开发，并发整理，堆大小对STW无影响，停顿<10ms。")]),v._v(" "),_("p",[v._v("• 适用场景：对延迟极度敏感的系统（如实时交易）。")])]),v._v(" "),_("li",[_("p",[v._v("ZGC")]),v._v(" "),_("p",[v._v("• 特点：Oracle开发，基于染色指针技术，STW<1ms，支持TB级堆。")]),v._v(" "),_("p",[v._v("• 适用场景：超大内存（16TB+）、云原生及实时系统（如金融高频交易）。")])])]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("五、"),_("strong",[v._v("选择建议")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("场景需求")]),v._v(" "),_("th",[v._v("推荐回收器")]),v._v(" "),_("th",[v._v("JDK版本")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("小型应用/客户端程序")]),v._v(" "),_("td",[v._v("Serial/Serial Old")]),v._v(" "),_("td",[v._v("全版本")])]),v._v(" "),_("tr",[_("td",[v._v("后台批处理（高吞吐量）")]),v._v(" "),_("td",[v._v("Parallel Scavenge + Old")]),v._v(" "),_("td",[v._v("JDK8及之前")])]),v._v(" "),_("tr",[_("td",[v._v("高并发Web服务（低延迟）")]),v._v(" "),_("td",[v._v("CMS（JDK8）或G1（JDK9+）")]),v._v(" "),_("td",[v._v("JDK8/9+")])]),v._v(" "),_("tr",[_("td",[v._v("大堆且需平衡吞吐量与延迟")]),v._v(" "),_("td",[v._v("G1")]),v._v(" "),_("td",[v._v("JDK9+（默认）")])]),v._v(" "),_("tr",[_("td",[v._v("超低延迟（毫秒级响应）")]),v._v(" "),_("td",[v._v("Shenandoah/ZGC")]),v._v(" "),_("td",[v._v("JDK11+")])])])]),v._v(" "),_("hr"),v._v(" "),_("p",[v._v("六、"),_("strong",[v._v("版本演进与弃用")])]),v._v(" "),_("p",[v._v("• JDK8：默认Parallel Scavenge/Old，CMS主流。")]),v._v(" "),_("p",[v._v("• JDK9+：G1成为默认，CMS标记为废弃。")]),v._v(" "),_("p",[v._v("• JDK14：移除CMS，弃用Parallel Scavenge/Old。")]),v._v(" "),_("p",[v._v("通过合理选择回收器，结合"),_("code",[v._v("-Xmx")]),v._v("、"),_("code",[v._v("-XX:MaxGCPauseMillis")]),v._v("等参数调优，可显著提升应用性能。具体配置需结合GC日志分析工具（如GCEasy）进行监控和优化。")])])}),[],!1,null,null,null);_.default=t.exports}}]);