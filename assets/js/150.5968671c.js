(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{507:function(r,e,a){"use strict";a.r(e);var t=a(7),s=Object(t.a)({},(function(){var r=this,e=r._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[r._v("    \n     "),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("docker")]),r._v(" volume create portainer_data  "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("# 创建数据卷")]),r._v("\n\n     "),e("span",{pre:!0,attrs:{class:"token function"}},[r._v("docker")]),r._v(" run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-d")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("\\")]),r._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#以后台模式运行容器，避免占用终端")]),r._v("\n        "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("--name")]),r._v(" portainer-zh "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("\\")]),r._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#指定容器名称，便于管理")]),r._v("\n        "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("--restart")]),e("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),r._v("always "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("\\")]),r._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#确保 Docker 服务重启后容器自动恢复")]),r._v("\n                                "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#新增集群通信端口  -p 8000:8000 \\ ")]),r._v("\n        "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-p")]),r._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("9000")]),r._v(":9000 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("\\")]),r._v("          "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#将宿主机的 9000 端口映射到容器的 9000 端口，用于 Web UI 访问    ")]),r._v("\n        "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-v")]),r._v(" /var/run/docker.sock:/var/run/docker.sock "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("\\")]),r._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#挂载 Docker 守护进程套接字，使 Portainer 能直接管理宿主机 Docker 环境")]),r._v("\n        "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[r._v("-v")]),r._v(" portainer_data:/data "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("\\")]),r._v("\n        "),e("span",{pre:!0,attrs:{class:"token number"}},[r._v("6053537")]),r._v("/portainer-ce:latest "),e("span",{pre:!0,attrs:{class:"token comment"}},[r._v("#社区中文版      portainer/portainer-ce:官方版")]),r._v("\n")])]),r._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[r._v("1")]),e("br"),e("span",{staticClass:"line-number"},[r._v("2")]),e("br"),e("span",{staticClass:"line-number"},[r._v("3")]),e("br"),e("span",{staticClass:"line-number"},[r._v("4")]),e("br"),e("span",{staticClass:"line-number"},[r._v("5")]),e("br"),e("span",{staticClass:"line-number"},[r._v("6")]),e("br"),e("span",{staticClass:"line-number"},[r._v("7")]),e("br"),e("span",{staticClass:"line-number"},[r._v("8")]),e("br"),e("span",{staticClass:"line-number"},[r._v("9")]),e("br"),e("span",{staticClass:"line-number"},[r._v("10")]),e("br"),e("span",{staticClass:"line-number"},[r._v("11")]),e("br")])]),e("p",[r._v("访问 "),e("code",[r._v("http://IP:9000")]),r._v(" 即可初始化管理员账户。")]),r._v(" "),e("p",[r._v("Portainer 是一款开源的轻量级容器管理平台，主要用于简化 Docker 和 Kubernetes 等容器化环境的部署、监控与运维操作。其通过直观的图形界面（Web UI）降低了容器技术的使用门槛，支持从单机到集群的全场景管理。以下是其核心特性的详细解析：")]),r._v(" "),e("hr"),r._v(" "),e("p",[e("strong",[r._v("一、定位与功能")])]),r._v(" "),e("ol",[e("li",[e("p",[r._v("多环境管理"),e("br"),r._v("\nPortainer 支持统一管理 Docker、Docker Compose、Swarm 集群 和 Kubernetes，用户可通过单一界面同时监控多个集群节点和服务状态。例如，在混合云环境中，管理员可同时管理本地 Docker 主机和云端 Kubernetes 集群，无需切换工具。")])]),r._v(" "),e("li",[e("p",[r._v("核心操作功能"),e("br"),r._v("\n• 容器管理：支持容器的创建、启动、停止、删除，并提供日志查看、终端控制台操作等功能。")]),r._v(" "),e("p",[r._v("• 镜像管理：支持拉取/推送镜像至 Docker Hub、私有仓库（如 Harbor），并支持镜像标签管理和构建。")]),r._v(" "),e("p",[r._v("• 网络与存储：可配置容器网络（如 bridge/overlay）、管理数据卷，实现容器间通信与数据持久化。")]),r._v(" "),e("p",[r._v("• 资源监控：实时显示 CPU、内存、网络等资源使用情况，帮助快速定位性能瓶颈。")])]),r._v(" "),e("li",[e("p",[r._v("企业级扩展"),e("br"),r._v("\n提供 RBAC（基于角色的访问控制）、多租户支持 和 LDAP 集成，适用于团队协作与权限分级管理。例如，开发人员可被限制仅操作测试环境容器，而运维团队拥有生产环境的完全权限。")])])]),r._v(" "),e("hr"),r._v(" "),e("p",[e("strong",[r._v("二、架构与组件")]),r._v("\nPortainer 采用 Server-Agent 架构："),e("br"),r._v("\n• Portainer Server：部署为主容器，内置 API 和 Web UI，负责处理用户请求与数据持久化（默认使用 SQLite，可配置 MySQL 等数据库）。")]),r._v(" "),e("p",[r._v("• Portainer Agent：以轻量级容器形式运行于每个集群节点，收集节点状态并与 Server 通信，实现分布式管理。")]),r._v(" "),e("p",[r._v("这种设计使得 Portainer 既能管理本地 Docker 环境，也能通过 Agent 扩展至大规模集群。")]),r._v(" "),e("hr"),r._v(" "),e("p",[e("strong",[r._v("三、版本与部署")])]),r._v(" "),e("ol",[e("li",[e("p",[r._v("版本差异"),e("br"),r._v("\n• 社区版（CE）：免费开源，包含基础功能，适合个人开发者和小型团队。")]),r._v(" "),e("p",[r._v("• 企业版（BE）：提供高级功能如审计日志、SSO 集成和商业支持，适用于大型企业。")])]),r._v(" "),e("li",[e("p",[r._v("部署方式"),e("br"),r._v("\n• 单机部署：通过 Docker 命令快速启动，挂载 Docker 套接字实现本地管理："),e("br"),r._v("\n• 集群部署：在 Swarm 或 Kubernetes 集群中部署 Server 和 Agent，支持高可用和跨节点管理。")])])]),r._v(" "),e("hr"),r._v(" "),e("p",[e("strong",[r._v("四、适用场景")])]),r._v(" "),e("ol",[e("li",[r._v("开发测试环境：开发者可通过图形界面快速部署微服务原型，无需记忆复杂 CLI 命令。")]),r._v(" "),e("li",[r._v("运维监控：实时查看容器资源消耗，结合日志分析工具（如 ELK）实现故障排查。")]),r._v(" "),e("li",[r._v("教育与培训：降低 Docker 学习曲线，适合新手通过可视化操作理解容器生命周期。")])]),r._v(" "),e("hr"),r._v(" "),e("p",[e("strong",[r._v("五、优势与局限")]),r._v("\n• 优势：")]),r._v(" "),e("p",[r._v("• 轻量化：容器化部署，资源占用低（仅需 100MB 内存）。")]),r._v(" "),e("p",[r._v("• 跨平台：支持 Linux/Windows 服务器及 ARM 架构设备（如树莓派）。")]),r._v(" "),e("p",[r._v("• 局限：")]),r._v(" "),e("p",[r._v("• 高级功能依赖企业版，社区版功能有限；")]),r._v(" "),e("p",[r._v("• 大规模集群管理时需优化 Agent 通信性能。")]),r._v(" "),e("hr"),r._v(" "),e("p",[r._v("通过 Portainer，用户可将复杂的容器操作转化为直观的点击与配置，显著提升运维效率。其开源特性与活跃的社区支持（GitHub 超 20k Stars），使其成为容器管理领域的标杆工具。")])])}),[],!1,null,null,null);e.default=s.exports}}]);