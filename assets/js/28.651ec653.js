(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{385:function(t,s,v){"use strict";v.r(s);var _=v(7),e=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("在 Java 中，"),s("code",[t._v("flush()")]),t._v(" 方法的主要作用是强制将缓冲区中的数据立即写入目标设备（如文件、网络等），确保数据的及时性和完整性。以下是其核心作用和相关细节的详细说明：")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("一、核心作用")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("清空缓冲区"),s("br"),t._v("\n当使用缓冲流（如 "),s("code",[t._v("BufferedOutputStream")]),t._v("、"),s("code",[t._v("PrintWriter")]),t._v("）时，数据会先写入内存缓冲区，而非直接输出到目标设备。"),s("code",[t._v("flush()")]),t._v(" 会强制将缓冲区中的所有数据一次性写入目标设备，并清空缓冲区，避免数据滞留。\n• "),s("em",[t._v("示例")]),t._v("：若通过 "),s("code",[t._v("Socket")]),t._v(" 发送数据，调用 "),s("code",[t._v("flush()")]),t._v(" 能确保数据立即发送到远程计算机，而不是等待缓冲区填满。")])]),t._v(" "),s("li",[s("p",[t._v("防止数据丢失"),s("br"),t._v("\n在程序异常终止或未正确关闭流时，未刷新的缓冲区数据可能丢失。手动调用 "),s("code",[t._v("flush()")]),t._v(" 可降低这种风险。例如，在循环中频繁写入少量数据时，定期调用 "),s("code",[t._v("flush()")]),t._v(" 能确保部分数据已持久化。")])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("二、使用场景")]),t._v(" "),s("ol",[s("li",[t._v("网络传输"),s("br"),t._v("\n网络通信中需即时发送数据包（如聊天消息），必须调用 "),s("code",[t._v("flush()")]),t._v(" 强制刷新缓冲区，否则数据可能延迟发送。")]),t._v(" "),s("li",[t._v("关键数据写入"),s("br"),t._v("\n写入重要文件时（如日志、事务记录），调用 "),s("code",[t._v("flush()")]),t._v(" 可确保数据及时落盘，避免程序崩溃导致数据丢失。")]),t._v(" "),s("li",[t._v("缓冲区未满时"),s("br"),t._v("\n当写入数据量较小且未达到缓冲区容量时，需手动刷新以立即输出数据。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("三、与 "),s("code",[t._v("close()")]),t._v(" 方法的区别")]),t._v(" "),s("p",[t._v("• "),s("code",[t._v("close()")]),t._v("：关闭流时会自动调用 "),s("code",[t._v("flush()")]),t._v("，确保缓冲区数据输出，但关闭后流不可再用。")]),t._v(" "),s("p",[t._v("• "),s("code",[t._v("flush()")]),t._v("：仅刷新缓冲区，不关闭流，后续仍可继续写入数据。")]),t._v(" "),s("p",[s("em",[t._v("典型用法")]),t._v("：在 "),s("code",[t._v("out.flush(); out.close();")]),t._v(" 中，"),s("code",[t._v("flush()")]),t._v(" 显式保证数据写入，"),s("code",[t._v("close()")]),t._v(" 释放资源。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("四、性能注意事项")]),t._v(" "),s("p",[t._v("• 避免频繁调用：频繁调用 "),s("code",[t._v("flush()")]),t._v(" 会增加 I/O 操作次数，降低性能（如每次写入 1 字节后刷新，相当于禁用缓冲区）。")]),t._v(" "),s("p",[t._v("• 合理权衡：根据场景平衡数据安全性与性能。例如，实时性要求高的场景需频繁刷新，而批量写入大数据时可依赖缓冲区自动刷新。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("五、适用类与实现")]),t._v(" "),s("p",[s("code",[t._v("flush()")]),t._v(" 方法定义在以下接口中：\n• "),s("code",[t._v("OutputStream")]),t._v("（如 "),s("code",[t._v("FileOutputStream")]),t._v("、"),s("code",[t._v("Socket.getOutputStream()")]),t._v("）")]),t._v(" "),s("p",[t._v("• "),s("code",[t._v("Writer")]),t._v("（如 "),s("code",[t._v("FileWriter")]),t._v("、"),s("code",[t._v("BufferedWriter")]),t._v("）")]),t._v(" "),s("p",[t._v("• "),s("code",[t._v("Flushable")]),t._v(" 接口的实现类")]),t._v(" "),s("p",[t._v("使用时只需调用 "),s("code",[t._v("流对象.flush()")]),t._v("，如：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OutputStream")]),t._v(" os "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"data.txt"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBytes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flush")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 强制数据写入文件")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("hr"),t._v(" "),s("p",[t._v("总结")]),t._v(" "),s("p",[s("code",[t._v("flush()")]),t._v(" 是 Java I/O 中控制缓冲区行为的关键方法，适用于需要确保数据即时性和完整性的场景。其与 "),s("code",[t._v("close()")]),t._v(" 的配合使用是资源管理的常见模式，但在性能敏感场景中需谨慎调用频率。")])])}),[],!1,null,null,null);s.default=e.exports}}]);