(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{443:function(t,s,a){"use strict";a.r(s);var e=a(7),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("Dubbo 框架"),s("strong",[t._v("明确包含服务端（即服务提供者）的角色")]),t._v("，它是框架的核心组件之一。以下是详细说明：")]),t._v(" "),s("h3",{attrs:{id:"🛠️-1-服务端的定义与作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🛠️-1-服务端的定义与作用"}},[t._v("#")]),t._v(" 🛠️ 1. "),s("strong",[t._v("服务端的定义与作用")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("服务端（Provider）")]),t._v("：负责实现具体的业务逻辑，将服务接口暴露到网络中，供消费者（Consumer）远程调用。")]),t._v(" "),s("li",[s("strong",[t._v("核心任务")]),t._v("：\n"),s("ul",[s("li",[t._v("定义服务接口及实现类（例如 "),s("code",[t._v("HelloServiceImpl")]),t._v(" 实现 "),s("code",[t._v("HelloService")]),t._v(" 接口）。")]),t._v(" "),s("li",[t._v("通过配置（XML 或注解）将服务注册到注册中心（如 Zookeeper、Nacos）。")]),t._v(" "),s("li",[t._v("监听指定端口（如默认的 "),s("code",[t._v("20880")]),t._v("），接收并处理消费者请求。")])])])]),t._v(" "),s("h3",{attrs:{id:"⚙️-2-服务端的配置与启动流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⚙️-2-服务端的配置与启动流程"}},[t._v("#")]),t._v(" ⚙️ 2. "),s("strong",[t._v("服务端的配置与启动流程")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("配置方式")]),t._v("：\n"),s("ul",[s("li",[s("strong",[t._v("XML 配置")]),t._v("：使用 "),s("code",[t._v("<dubbo:service>")]),t._v(" 标签暴露服务，指定接口、实现类、协议和端口。"),s("div",{staticClass:"language-xml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("dubbo:")]),t._v("service")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.example.DemoService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("ref")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("demoService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("bean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("demoService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("com.example.DemoServiceImpl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("注解配置")]),t._v("：通过 "),s("code",[t._v("@Service")]),t._v(" 注解标记实现类（Dubbo 2.7+）。"),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Service")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoServiceImpl")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])])]),t._v(" "),s("li",[s("strong",[t._v("启动流程")]),t._v("：\n"),s("ol",[s("li",[t._v("加载 Spring 上下文，解析 Dubbo 配置。")]),t._v(" "),s("li",[t._v("将服务信息注册到注册中心（如地址、接口、版本）。")]),t._v(" "),s("li",[t._v("初始化网络通信模块（基于 Netty），监听请求。")])])])]),t._v(" "),s("h3",{attrs:{id:"🔄-3-服务端与注册中心的交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🔄-3-服务端与注册中心的交互"}},[t._v("#")]),t._v(" 🔄 3. "),s("strong",[t._v("服务端与注册中心的交互")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("服务注册")]),t._v("：启动时向注册中心发送自身地址和接口信息。")]),t._v(" "),s("li",[s("strong",[t._v("心跳维持")]),t._v("：通过长连接确保注册中心感知服务存活状态。")]),t._v(" "),s("li",[s("strong",[t._v("动态发现")]),t._v("：若服务端宕机，注册中心会通知消费者更新服务列表。")])]),t._v(" "),s("h3",{attrs:{id:"💡-4-服务端与消费者的协作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#💡-4-服务端与消费者的协作"}},[t._v("#")]),t._v(" 💡 4. "),s("strong",[t._v("服务端与消费者的协作")])]),t._v(" "),s("ul",[s("li",[t._v("消费者从注册中心获取服务端地址列表，根据负载均衡策略（如随机、轮询）选择目标服务端发起调用。")]),t._v(" "),s("li",[t._v("服务端处理请求后返回结果，消费者无需感知远程调用的复杂性。")])]),t._v(" "),s("h3",{attrs:{id:"⚠️-5-常见误解澄清"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⚠️-5-常见误解澄清"}},[t._v("#")]),t._v(" ⚠️ 5. "),s("strong",[t._v("常见误解澄清")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Dubbo 必须有服务端")]),t._v("：没有服务端，消费者无法调用任何服务。")]),t._v(" "),s("li",[s("strong",[t._v("直连模式")]),t._v("：在测试场景下，消费者可绕过注册中心直连服务端（需配置 "),s("code",[t._v("url")]),t._v(" 参数），但这仍依赖服务端的存在。")])]),t._v(" "),s("h3",{attrs:{id:"💎-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#💎-总结"}},[t._v("#")]),t._v(" 💎 "),s("strong",[t._v("总结")])]),t._v(" "),s("p",[t._v("Dubbo "),s("strong",[t._v("服务端（Provider）是框架的基石")]),t._v("，承担服务实现、注册、暴露和请求处理的核心职责。其配置和启动流程与注册中心、消费者紧密协同，共同构成分布式服务调用的闭环。若需进一步验证，可参考 Dubbo 官方示例中的服务端代码实现。")])])}),[],!1,null,null,null);s.default=n.exports}}]);