(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{427:function(t,v,_){"use strict";_.r(v);var s=_(7),r=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("分布式算法是分布式系统实现协调、容错、数据一致性的核心技术，根据其功能和应用场景，可分为以下几类：")]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"⚙️-一、共识算法-consensus-algorithms"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⚙️-一、共识算法-consensus-algorithms"}},[t._v("#")]),t._v(" ⚙️ "),v("strong",[t._v("一、共识算法（Consensus Algorithms）")])]),t._v(" "),v("p",[t._v("用于在分布式节点间"),v("strong",[t._v("达成一致决策")]),t._v("，是分布式系统的核心基础。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Paxos")]),t._v("：首个理论化共识算法，通过提案（Propose）、承诺（Promise）、接受（Accept）多阶段达成一致，容错性强但实现复杂。")]),t._v(" "),v("li",[v("strong",[t._v("Raft")]),t._v("：Paxos的工程简化版，通过"),v("strong",[t._v("领导者选举（Leader Election）")]),t._v(" 和"),v("strong",[t._v("日志复制（Log Replication）")]),t._v(" 实现共识，易于理解（如Etcd、TiDB）。")]),t._v(" "),v("li",[v("strong",[t._v("ZAB（ZooKeeper Atomic Broadcast）")]),t._v("：专为ZooKeeper设计，结合崩溃恢复与消息广播，保证事务顺序一致性。")]),t._v(" "),v("li",[v("strong",[t._v("PBFT（拜占庭容错算法）")]),t._v("：容忍恶意节点（拜占庭故障），适用于区块链（如Hyperledger Fabric）。")]),t._v(" "),v("li",[v("strong",[t._v("PoW/PoS")]),t._v("：区块链特有共识，PoW依赖算力竞争（比特币），PoS依赖代币质押（以太坊2.0）。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"🔒-二、分布式一致性算法-consistency-algorithms"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🔒-二、分布式一致性算法-consistency-algorithms"}},[t._v("#")]),t._v(" 🔒 "),v("strong",[t._v("二、分布式一致性算法（Consistency Algorithms）")])]),t._v(" "),v("p",[t._v("确保数据在多个副本间的"),v("strong",[t._v("状态同步")]),t._v("，分强一致性与最终一致性。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("强一致性协议")]),t._v("：\n"),v("ul",[v("li",[v("strong",[t._v("2PC（两阶段提交）")]),t._v("：通过“准备-提交”保证事务原子性，但存在单点阻塞风险。")]),t._v(" "),v("li",[v("strong",[t._v("3PC（三阶段提交）")]),t._v("：增加预提交阶段减少阻塞，仍可能因网络分区导致数据不一致。")])])]),t._v(" "),v("li",[v("strong",[t._v("最终一致性协议")]),t._v("：\n"),v("ul",[v("li",[v("strong",[t._v("Gossip协议")]),t._v("：节点随机交换信息（如疫情传播），实现最终一致（Cassandra、Consul）。")]),t._v(" "),v("li",[v("strong",[t._v("CRDTs（无冲突复制数据类型）")]),t._v("：数据结构级冲突解决，适用于协同编辑、分布式缓存。")])])])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"📦-三、分布式存储算法-storage-algorithms"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#📦-三、分布式存储算法-storage-algorithms"}},[t._v("#")]),t._v(" 📦 "),v("strong",[t._v("三、分布式存储算法（Storage Algorithms）")])]),t._v(" "),v("p",[t._v("解决数据"),v("strong",[t._v("分片、冗余与恢复")]),t._v("问题。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("一致性哈希（Consistent Hashing）")]),t._v("：动态扩缩容时最小化数据迁移，用于Redis Cluster、DynamoDB。")]),t._v(" "),v("li",[v("strong",[t._v("Quorum NWR模型")]),t._v("：读写需多数节点成功（如NWR配置：N副本数，W写成功数，R读成功数）。")]),t._v(" "),v("li",[v("strong",[t._v("纠删码（Erasure Coding）")]),t._v("：分片存储+冗余校验，降低存储成本（Ceph、HDFS）。")]),t._v(" "),v("li",[v("strong",[t._v("分布式哈希表（DHT）")]),t._v("：如Chord算法，环形拓扑定位数据节点（IPFS）。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"⏱️-四、分布式事务算法-transaction-algorithms"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⏱️-四、分布式事务算法-transaction-algorithms"}},[t._v("#")]),t._v(" ⏱️ "),v("strong",[t._v("四、分布式事务算法（Transaction Algorithms）")])]),t._v(" "),v("p",[t._v("保障"),v("strong",[t._v("跨节点事务的原子性")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("TCC（Try-Confirm-Cancel）")]),t._v("：业务补偿型，分尝试、确认、取消三阶段（电商订单）。")]),t._v(" "),v("li",[v("strong",[t._v("Saga")]),t._v("：长事务拆分为子事务，失败时触发补偿操作（微服务架构）。")]),t._v(" "),v("li",[v("strong",[t._v("Seata")]),t._v("：开源框架，支持AT（自动补偿）、TCC等模式。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"🎯-五、分布式选举算法-leader-election"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🎯-五、分布式选举算法-leader-election"}},[t._v("#")]),t._v(" 🎯 "),v("strong",[t._v("五、分布式选举算法（Leader Election）")])]),t._v(" "),v("p",[t._v("动态选举"),v("strong",[t._v("主节点")]),t._v("，确保系统高可用。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Bully算法")]),t._v("：高ID节点竞争胜出（Elasticsearch旧版）。")]),t._v(" "),v("li",[v("strong",[t._v("Raft Leader Election")]),t._v("：基于随机超时和投票机制（Kubernetes Etcd）。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"🆔-六、分布式id生成算法-id-generation"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🆔-六、分布式id生成算法-id-generation"}},[t._v("#")]),t._v(" 🆔 "),v("strong",[t._v("六、分布式ID生成算法（ID Generation）")])]),t._v(" "),v("p",[t._v("生成"),v("strong",[t._v("全局唯一、有序ID")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("雪花算法（Snowflake）")]),t._v("：时间戳+机器ID+序列号（时钟回拨是核心挑战）。")]),t._v(" "),v("li",[v("strong",[t._v("Leaf-Segment")]),t._v("：数据库号段预分配（美团）。")]),t._v(" "),v("li",[v("strong",[t._v("MongoDB ObjectId")]),t._v("：时间戳+随机值+递增计数器。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"⏰-七、时钟同步算法-clock-synchronization"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#⏰-七、时钟同步算法-clock-synchronization"}},[t._v("#")]),t._v(" ⏰ "),v("strong",[t._v("七、时钟同步算法（Clock Synchronization）")])]),t._v(" "),v("p",[t._v("解决节点间"),v("strong",[t._v("时间偏差")]),t._v("问题。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("NTP（Network Time Protocol）")]),t._v("：分层时间服务器同步。")]),t._v(" "),v("li",[v("strong",[t._v("TrueTime API（Google Spanner）")]),t._v("：原子钟+GPS实现纳秒级精度。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"🔑-八、分布式锁算法-distributed-lock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#🔑-八、分布式锁算法-distributed-lock"}},[t._v("#")]),t._v(" 🔑 "),v("strong",[t._v("八、分布式锁算法（Distributed Lock）")])]),t._v(" "),v("p",[t._v("实现"),v("strong",[t._v("共享资源互斥访问")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("Redis RedLock")]),t._v("：多实例加锁防单点故障。")]),t._v(" "),v("li",[v("strong",[t._v("ZooKeeper临时有序节点")]),t._v("：通过节点顺序和监听机制实现锁。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"📊-九、任务调度与分片算法-task-scheduling"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#📊-九、任务调度与分片算法-task-scheduling"}},[t._v("#")]),t._v(" 📊 "),v("strong",[t._v("九、任务调度与分片算法（Task Scheduling）")])]),t._v(" "),v("p",[t._v("优化"),v("strong",[t._v("任务分配与执行效率")]),t._v("。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("MapReduce")]),t._v("：分片处理（Map）、数据分发（Shuffle）、聚合（Reduce）（Hadoop）。")]),t._v(" "),v("li",[v("strong",[t._v("流处理算法")]),t._v("：如Kafka的ISR（In-Sync Replicas），副本同步保消息不丢。")])]),t._v(" "),v("hr"),t._v(" "),v("h3",{attrs:{id:"💎-总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#💎-总结"}},[t._v("#")]),t._v(" 💎 "),v("strong",[t._v("总结")])]),t._v(" "),v("p",[t._v("分布式算法体系庞大，实际应用中需根据"),v("strong",[t._v("业务需求")]),t._v("（强一致/最终一致）、"),v("strong",[t._v("故障类型")]),t._v("（宕机/恶意节点）、"),v("strong",[t._v("规模")]),t._v("（节点数量）综合选择。例如：")]),t._v(" "),v("ul",[v("li",[t._v("金融系统需强一致：选Raft/PBFT；")]),t._v(" "),v("li",[t._v("物联网设备协同：Gossip协议更轻量；")]),t._v(" "),v("li",[t._v("区块链防篡改：PoW/PoS/PBFT。")])]),t._v(" "),v("blockquote",[v("p",[t._v("注：以上分类基于功能场景，部分算法可能跨类别（如Raft同时涵盖共识与选举）。")])])])}),[],!1,null,null,null);v.default=r.exports}}]);