(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{460:function(t,s,a){"use strict";a.r(s);var n=a(7),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("向 Kafka 中发送重复的数据会导致消息被多次存储或消费，具体结果取决于 Kafka 的配置和消息处理策略。以下是不同场景下的核心影响及解决方案：")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"⚠️-一、无防护机制时-消息必然重复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⚠️-一、无防护机制时-消息必然重复"}},[t._v("#")]),t._v(" ⚠️ "),s("strong",[t._v("一、无防护机制时：消息必然重复")])]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("生产者重试机制导致重复")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("原因")]),t._v("：当生产者发送消息后未收到 Broker 的确认（如网络抖动、Broker 故障），会触发重试机制，导致同一条消息被多次发送。")]),t._v(" "),s("li",[s("strong",[t._v("表现")]),t._v("：Broker 会将重复消息视为独立消息存储，消费者可能多次消费相同数据。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("数据乱序问题")])]),t._v(" "),s("ul",[s("li",[t._v("若重试消息与后续消息顺序错乱（如消息1失败重发时，消息2已写入），Broker 存储顺序变为 "),s("code",[t._v("消息2 → 消息1")]),t._v("，破坏业务逻辑。")])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"🛡️-二、kafka-内置防重复机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🛡️-二、kafka-内置防重复机制"}},[t._v("#")]),t._v(" 🛡️ "),s("strong",[t._v("二、Kafka 内置防重复机制")])]),t._v(" "),s("h4",{attrs:{id:"_1-幂等性生产者-idempotence"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-幂等性生产者-idempotence"}},[t._v("#")]),t._v(" 1. "),s("strong",[t._v("幂等性生产者（Idempotence）")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("原理")]),t._v("：\n"),s("ul",[s("li",[t._v("每个生产者分配唯一 "),s("code",[t._v("PID")]),t._v("，每条消息绑定分区级单调递增序列号 "),s("code",[t._v("SequenceNumber")]),t._v("。")]),t._v(" "),s("li",[t._v("Broker 缓存最近5个序列号，拒绝重复或乱序的序列号（如 "),s("code",[t._v("seq_num")]),t._v(" ≤ 缓存最大值）。")])])]),t._v(" "),s("li",[s("strong",[t._v("配置")]),t._v("："),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[t._v("spring.kafka.producer.properties.enable.idempotence=true\nspring.kafka.producer.acks=all           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 必须设为 all")]),t._v("\nmax.in.flight.requests.per.connection≤5  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 避免乱序")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("局限")]),t._v("：仅保证单分区、单会话（生产者重启后失效）的消息不重复。")])]),t._v(" "),s("h4",{attrs:{id:"_2-事务-transactions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-事务-transactions"}},[t._v("#")]),t._v(" 2. "),s("strong",[t._v("事务（Transactions）")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("原理")]),t._v("：\n"),s("ul",[s("li",[t._v("跨分区原子写入：事务内多条消息要么全部提交，要么全部丢弃。")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("transactional.id")]),t._v(" 关联生产者会话，重启后仍能防重复。")])])]),t._v(" "),s("li",[s("strong",[t._v("配置")]),t._v("："),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"transactional.id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tx-producer-1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nproducer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("initTransactions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("record1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("record2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    producer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("abortTransaction")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("优势")]),t._v("：支持多分区、跨会话的精确一次语义（Exactly-Once）。")])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"🔄-三、消费者端重复消费及应对"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🔄-三、消费者端重复消费及应对"}},[t._v("#")]),t._v(" 🔄 "),s("strong",[t._v("三、消费者端重复消费及应对")])]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("重复消费原因")])]),t._v(" "),s("ul",[s("li",[t._v("消费者提交 Offset 前崩溃，重启后从旧 Offset 重新拉取消息。")]),t._v(" "),s("li",[t._v("即使生产者防重复，消费者仍可能因提交失败收到重复消息。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("解决方案")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("消费者幂等设计")]),t._v("：\n"),s("ul",[s("li",[s("strong",[t._v("唯一键去重")]),t._v("：利用数据库唯一约束（如联合业务ID）。"),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ALTER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" orders "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNIQUE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tx_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 重复插入抛异常")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])]),t._v(" "),s("li",[s("strong",[t._v("状态检查")]),t._v("：用 Redis 记录已处理消息ID（如 "),s("code",[t._v("SETNX message_id 1")]),t._v("）。")])])]),t._v(" "),s("li",[s("strong",[t._v("事务型消费者")]),t._v("：\n"),s("ul",[s("li",[t._v("配合 Kafka 事务，设置 "),s("code",[t._v("isolation.level=read_committed")]),t._v("，仅读取已提交事务的消息。")])])])])])]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"💎-四、最佳实践总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#💎-四、最佳实践总结"}},[t._v("#")]),t._v(" 💎 "),s("strong",[t._v("四、最佳实践总结")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[s("strong",[t._v("场景")])]),t._v(" "),s("th",[t._v("配置方案")]),t._v(" "),s("th",[t._v("效果")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("strong",[t._v("单分区防重复")])]),t._v(" "),s("td",[t._v("启用幂等性 + "),s("code",[t._v("acks=all")]),t._v(" + "),s("code",[t._v("max.in.flight≤5")])]),t._v(" "),s("td",[t._v("单会话内无重复、无乱序")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("多分区/跨会话防重复")])]),t._v(" "),s("td",[t._v("启用事务 + "),s("code",[t._v("transactional.id")])]),t._v(" "),s("td",[t._v("原子写入、重启不重复")])]),t._v(" "),s("tr",[s("td",[s("strong",[t._v("消费者端防重复")])]),t._v(" "),s("td",[t._v("业务幂等设计（DB唯一键/Redis缓存）")]),t._v(" "),s("td",[t._v("兜底去重，兼容所有场景")])])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("生产环境建议")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("关键业务："),s("strong",[t._v("生产者事务 + 消费者幂等")]),t._v(" 双重保障。")]),t._v(" "),s("li",[t._v("高吞吐场景：启用幂等性，牺牲部分灵活性换取性能。")]),t._v(" "),s("li",[t._v("日志类数据：可接受 "),s("code",[t._v("acks=1")]),t._v("，容忍少量重复以提升吞吐量。")])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("通过合理配置 Kafka 的"),s("strong",[t._v("幂等性")]),t._v("和"),s("strong",[t._v("事务")]),t._v("，结合"),s("strong",[t._v("消费者端的业务幂等设计")]),t._v("，可有效解决重复消息问题，实现从生产到消费的端到端精确一次处理（Exactly-Once）。")])])}),[],!1,null,null,null);s.default=r.exports}}]);